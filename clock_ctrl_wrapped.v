/****************************************
*
*     Module: clock_ctrl_withio.v
*     Date: Fri Mar  6 17:21:46 2020
*     Generated by IO Assigner
*
****************************************/
module clock_ctrl_withio.v_with_io(
	inout		POC,
	inout		IO_GNDK,
	inout		IO_VCCK,
	inout		CORE_GNDK,
	inout		CORE_VCCK,
	input		test_ctl_PORT,
	input		test_clk_PORT,
	input		osci_clk_PORT,
	input		rst_n_PORT,
	output		int_clk_o_PORT,
	output		int_clk_PORT
);

/************************************
*
*     Cell to Port wire instance
*
************************************/
wire	test_ctl_PORT_A;
wire	test_clk_PORT_A;
wire	osci_clk_PORT_A;
wire	rst_n_PORT_A;
wire	int_clk_o_PORT_D;
wire	int_clk_PORT_D;
/**************************************
*
*     Module to Cell wire instance
*
**************************************/
wire	test_ctl_PORT_D;
wire	test_clk_PORT_D;
wire	osci_clk_PORT_D;
wire	rst_n_PORT_D;
wire	int_clk_o_PORT_A;
wire	int_clk_PORT_A;
/**********************************
*
*     Module pin wire instance
*
**********************************/
wire		test_ctl	;
wire		test_clk	;
wire		osci_clk	;
wire		rst_n	;
wire		int_clk_o	;
wire		int_clk	;
/************************
*
*     Pin assignment
*
************************/

assign	test_ctl_PORT_A	=	test_ctl_PORT;
assign	test_ctl	=	test_ctl_PORT_D;
assign	test_clk_PORT_A	=	test_clk_PORT;
assign	test_clk	=	test_clk_PORT_D;
assign	osci_clk_PORT_A	=	osci_clk_PORT;
assign	osci_clk	=	osci_clk_PORT_D;
assign	rst_n_PORT_A	=	rst_n_PORT;
assign	rst_n	=	rst_n_PORT_D;
assign	int_clk_o_PORT	=	int_clk_o_PORT_D;
assign	int_clk_o_PORT_A	=	int_clk_o;
assign	int_clk_PORT	=	int_clk_PORT_D;
assign	int_clk_PORT_A	=	int_clk;


/***********************
*
*     Cell instance
*
***********************/
MDSDUIX16	MDSDUIX16_test_ctl_inst
(
	.DS0(1'b1),
	.DS1(1'b1),
	.DS2(1'b1),
	.SMT(),
	.OEN(1'b0),
	.PU(),
	.PD(),
	.IE(1'b1),
	.A(test_ctl_PORT_A),
	.D(test_ctl_PORT_D),
	.PAD()
);

MDSDUIX16	MDSDUIX16_test_clk_inst
(
	.DS0(1'b1),
	.DS1(1'b1),
	.DS2(1'b1),
	.SMT(),
	.OEN(1'b0),
	.PU(),
	.PD(),
	.IE(1'b1),
	.A(test_clk_PORT_A),
	.D(test_clk_PORT_D),
	.PAD()
);

MDSDUIX16	MDSDUIX16_osci_clk_inst
(
	.DS0(1'b1),
	.DS1(1'b1),
	.DS2(1'b1),
	.SMT(),
	.OEN(1'b0),
	.PU(),
	.PD(),
	.IE(1'b1),
	.A(osci_clk_PORT_A),
	.D(osci_clk_PORT_D),
	.PAD()
);

MDSDUIX16	MDSDUIX16_rst_n_inst
(
	.DS0(1'b1),
	.DS1(1'b1),
	.DS2(1'b1),
	.SMT(),
	.OEN(1'b0),
	.PU(),
	.PD(),
	.IE(1'b1),
	.A(rst_n_PORT_A),
	.D(rst_n_PORT_D),
	.PAD()
);

MDSDUIX16	MDSDUIX16_int_clk_o_inst
(
	.DS0(1'b1),
	.DS1(1'b1),
	.DS2(1'b1),
	.SMT(),
	.OEN(1'b0),
	.PU(),
	.PD(),
	.IE(1'b1),
	.A(int_clk_o_PORT_A),
	.D(int_clk_o_PORT_D),
	.PAD()
);

MDSDUIX16	MDSDUIX16_int_clk_inst
(
	.DS0(1'b1),
	.DS1(1'b1),
	.DS2(1'b1),
	.SMT(),
	.OEN(1'b0),
	.PU(),
	.PD(),
	.IE(1'b1),
	.A(int_clk_PORT_A),
	.D(int_clk_PORT_D),
	.PAD()
);



/*************************
*
*     PG pad instance
*
*************************/
VDD2DGZS VDD2DGZS_inst_0
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS2DGZS VSS2DGZS_inst_1
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD1DGZS VDD1DGZS_inst_2
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS1DGZS VSS1DGZS_inst_3
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD2DGZS VDD2DGZS_inst_4
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS2DGZS VSS2DGZS_inst_5
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD2DGZS VDD2DGZS_inst_6
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS2DGZS VSS2DGZS_inst_7
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD1DGZS VDD1DGZS_inst_8
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS1DGZS VSS1DGZS_inst_9
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD2DGZS VDD2DGZS_inst_10
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS2DGZS VSS2DGZS_inst_11
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD2DGZS VDD2DGZS_inst_12
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS2DGZS VSS2DGZS_inst_13
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD1DGZS VDD1DGZS_inst_14
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS1DGZS VSS1DGZS_inst_15
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD2DGZS VDD2DGZS_inst_16
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS2DGZS VSS2DGZS_inst_17
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD2DGZS VDD2DGZS_inst_18
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS2DGZS VSS2DGZS_inst_19
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD1DGZS VDD1DGZS_inst_20
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS1DGZS VSS1DGZS_inst_21
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VDD2DGZS VDD2DGZS_inst_22
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
VSS2DGZS VSS2DGZS_inst_23
(
	.VDDIO(IO_VCCK),
	.VSSIO(IO_GNDK),
	.VDD(CORE_VCCK),
	.VSS(CORE_GNDK),
	.POC(POC)
);
MCORNERS MCORNERS_topleft_inst
(

);
MCORNERS MCORNERS_topright_inst
(

);
MCORNERS MCORNERS_bottomleft_inst
(

);
MCORNERS MCORNERS_bottomright_inst
(

);



/*************************
*
*     Module instance
*
*************************/
clock_ctrl_withio.v clock_ctrl_withio.v_inst
(
	.test_ctl(test_ctl),
	.test_clk(test_clk),
	.osci_clk(osci_clk),
	.rst_n(rst_n),
	.int_clk_o(int_clk_o),
	.int_clk(int_clk)
);


endmodule
